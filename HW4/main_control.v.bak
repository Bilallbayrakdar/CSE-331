module main_control(opcode, Jal,Ori,Jr,Jmp,RegDest,Branch, Bneq, MemRead, MemtoReg,ALUOp, MemWrite,ALUSrc,RegWrite,RegWrite2,Lui);

	input[5:0] opcode;
	output Jal,Ori,Jr,Jmp,RegDest,Branch, Bneq, MemRead, MemtoReg,ALUOp, MemWrite,ALUSrc,RegWrite,RegWrite2,Lui;
	
	wire[5:0] op_not;
	wire r_type,lw,sw,beq,bne,j,jal,ori
	
	not(op_not[0],opcode[0]);
	not(op_not[1],opcode[1]);
	not(op_not[2],opcode[2]);
	not(op_not[3],opcode[3]);
	not(op_not[4],opcode[4]);
	not(op_not[5],opcode[5]);
	
	// 00 0000 addn subn andn orn jr || xorn -> not implemented in ALU
	and(r_type,op_not[0],op_not[1],op_not[2],op_not[3],op_not[4],op_not[5]);
	//10 0011
	and(lw,opcode[0],op_not[1],op_not[2],op_not[3],opcode[4],opcode[5]);
	//10 1011
	and(sw,opcode[0],op_not[1],opcode[2],op_not[3],opcode[4],opcode[5] );
	//00 0100
	and(beq,op_not[0],op_not[1],op_not[2],opcode[3],op_not[4],op_not[5]);
	//00 0101
	and(bne,op_not[0],op_not[1],op_not[2],opcode[3],op_not[4],opcode[5]);
	//00 0010
	and(j,op_not[0],op_not[1],op_not[2],op_not[3],opcode[4],op_not[5]);
	//00 0011
	and(jal,op_not[0],op_not[1],op_not[2],op_not[3],opcode[4],opcode[5]);
	//00 1101
	and(ori,op_not[0],op_not[1],opcode[2],opcode[3],op_not[4],opcode[5]);
	//00 1111
	and(ori,op_not[0],op_not[1],opcode[2],opcode[3],opcode[4],opcode[5]);
	
endmodule